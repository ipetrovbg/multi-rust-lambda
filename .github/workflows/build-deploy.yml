#name: Main
#
#on: push
#
#jobs:
#  codestyle:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Set up Rust
#        uses: hecrj/setup-rust-action@v1.3.4
#        with:
#          components: rustfmt
#      - uses: actions/checkout@v2
#      - run: cargo fmt --all -- --check
#
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Set up Rust
#        uses: hecrj/setup-rust-action@v1.3.4
#        with:
#          components: clippy
#      - uses: actions/checkout@v2
#      - run: cargo clippy --all-targets -- -D clippy::all
#
#  compile:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Set up Rust
#        uses: hecrj/setup-rust-action@v1.3.4
#      - uses: actions/checkout@v2
#      - run: cargo check --all
#  deploy:
#    needs: [codestyle, lint, compile]
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest
#    steps:
#      - name: Set up Rust
#        uses: hecrj/setup-rust-action@v1.3.4
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Deploy
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: eu-central-1
#        run: |
#          npm install
#          npx serverless deploy --conceal


name: Deploy main branch

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '14.18.2'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
#        with:
#          args: cargo build --target $BUILD_TARGET --release
      - uses: actions/upload-artifact@v2
        with:
          name: multi-rust-lambda-artifact
          path: |
            target/release/hello
            target/release/world

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: multi-rust-lambda-artifact
          path: target/release
      - name: Use Node.js ${{env.NODE_VERSION}}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
        - name: Install dependencies
          run: npm install

#      - name: Move binaries
#        run: mv target/${{ env.BUILD_TARGET }}/release/${{ env.BINARY_NAME }} bootstrap

      - name: Serverless deploy
        uses: serverless/github-action@master
        with:
          args: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}